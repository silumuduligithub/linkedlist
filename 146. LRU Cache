class LRUCache {
    class ListNode{
        ListNode prev, next;
        int key, val;
        ListNode(int key, int val){
            this.key = key;
            this.val = val;
            this.prev = null;
            this.next = null;
        }
    }
    HashMap<Integer, ListNode> map;
    ListNode head;
    ListNode tail;
    int capacity;
    public void addNode(ListNode temp){
        ListNode next = head.next;
        temp.next = next;
        next.prev = temp;
        head.next = temp;
        temp.prev = head;
    }
    public void deleteNode(ListNode cur){
        ListNode delNodePrev = cur.prev;
        ListNode delNodeNext = cur.next;
        delNodePrev.next = delNodeNext;
        delNodeNext.prev = delNodePrev;
        map.remove(cur.key);
    }
    public LRUCache(int capacity) {
        map = new HashMap<>();
        head = new ListNode(-1, -1);
        tail = new ListNode(-1, -1);
        head.next = tail;
        tail.prev = head;
        this.capacity = capacity;
    }
    
    public int get(int key) {
        if(map.containsKey(key)){
            ListNode node = map.get(key);
            deleteNode(node);
            ListNode newNode = new ListNode(node.key, node.val);
            addNode(newNode);
            map.put(newNode.key, newNode);
            return map.get(key).val;
        }
        return -1;
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key)){
            ListNode node = map.get(key);
            deleteNode(node);
            ListNode newNode = new ListNode(key, value);
            addNode(newNode);
            map.put(newNode.key, newNode);
        }else if(map.size() == capacity){
            deleteNode(tail.prev);
            ListNode node = new ListNode(key, value);
            map.put(key, node);
            addNode(node);
        }else{
            ListNode node = new ListNode(key, value);
            map.put(key, node);
            addNode(node);
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
